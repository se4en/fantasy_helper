name: Release
permissions:
  packages: write
  contents: write
on:
  push:
    branches:
      - master
    paths:
      - "fantasy_helper/**"
      - ".github/workflows/**"
      - "docker/**"
      - "docker-compose.prod.yml"
      - "docker-compose.yml"

jobs:
  push_to_registry:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Env variables assignment
        run: |
          echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ui Docker image
        uses: docker/build-push-action@v3
        with:
          file: docker/Dockerfile.ui
          context: .
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}_ui:${{ env.TAG_NAME }}

      - name: Build and push api Docker image
        uses: docker/build-push-action@v3
        with:
          file: docker/Dockerfile.api
          context: .
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}_api:${{ env.TAG_NAME }}
  
      - name: Build and push cron Docker image
        uses: docker/build-push-action@v3
        with:
          file: docker/Dockerfile.cron
          context: .
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}_cron:${{ env.TAG_NAME }}

  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: repository name fix and env
        run: |
          echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "domain=${{ secrets.DEPLOY_HOST }}" >> $GITHUB_ENV
          echo "letsencrypt_email=${{ secrets.LETSENCRYPT_EMAIL }}" >> $GITHUB_ENV
          echo "TAG_NAME=latest" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "Generating .env file"
          echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> .env
          echo "ADMINS=${{ secrets.ADMINS }}" >> .env
          echo "APP_PASSWORD=${{ secrets.APP_PASSWORD }}" >> .env
          echo "API_PORT=${{ secrets.API_PORT }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_URI=${{ secrets.POSTGRES_URI }}" >> .env
          echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> .env
          echo "GECKODRIVER_PATH=${{ secrets.GECKODRIVER_PATH }}" >> .env

          echo "IMAGE_REPO=${{ env.image_repository_name }}" >> .env
          echo "RELEASE_VERSION=${{ env.TAG_NAME }}" >> .env

      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./docker-compose.yml,./docker-compose.prod.yml,./.env"
          target: "~/${{ github.event.repository.name }}/"

      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.DEPLOY_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | sudo docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/${{ github.event.repository.name }}
            sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.prod.yml stop
            sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.prod.yml pull
            sudo docker-compose -f ./docker-compose.yml -f ./docker-compose.prod.yml up -d
